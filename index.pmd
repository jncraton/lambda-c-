% Lambda-Expressions
% Jon Craton
% Due: Sunday, June 17th 11:59 PM (D2L dropbox)

> I would like you to produce a paper that first gives a general overview
of the concept of Lambda- Expressions in the context of closure.



λ-calculus
==========

The relationship between computer programming and λ expressions dates back to the early days of computing. Alonzo Church discovered λ-calculus in the 1930s. This was more formally applied to programming languages in the 1950s, most popularly in the language Lisp.

Lisp was defined in 1958. As a fucntional language, it has lambda expressions included in the core syntax as:

    (lambda (square_me) (* square_me square_me))

The above expression evaluates to a function. We can see the remnant of this syntax today in many languages, including perhaps the most widely executed language in the world, JavaScript:

    function (square_me) { return square_me * square_me }

or using more modern JavaScript:

    square_me => square_me * square_me

All of these expression evaluate to a first-class function. This can be assigned to a variable as:

    square = square_me => square_me * square_me
    square(9) // 81

Or can simply be evaluated directly:

    (square_me => square_me * square_me)(9) // 81

This same concept exists in other languages such as Python:

```python
(lambda square_me: square_me * square_me)(9)
```

In broad terms, lambda expressions are just functions. λ-calculus uses the following syntax for defining a function:

    x ↦ x²

Whereas the syntax that we are all taught in school would look like this:

    f(x) = x²

These are equivalent functions, but λ-calculus does not assign a name ("f" in this case) to the function. It is defined *anonymously*. This distinction is the primary difference between the λ expressions in modern languages and other functions. λ functions are simply functions without names. Some languages also have other minor differences in implementation details, but this is the main one.

Closure
=======

One important thing to understand when considering functions as first class objects is the concept of closure. The concept of closure refers to the ability to persist local variable scope outside of function invocation.

Consider the following Python example:

```python
try:
  def inner():
    return x
  
  def outer(x):
    return inner()
  
  outer(5)
except NameError as e:
  print(e)
```

This fails because the function `inner` has no access to the variable `x`. It is not closed over `outer`'s environment. Consider the following modified example:

```python
def outer(x):
  def inner():
    return x
  return inner()

outer(5)
```

This works perfectly because `inner` is closed over `outer`'s environment. Note that closures keep access to their local scope even outside of function execution. Consider this example:

```python
def outer(x):
  def inner():
    return x
  return inner

f = outer(5) # This returns outer with x bound to 5

def describe(f):
  # We can print the closure content directly
  print("x is saved in f's closure as %d" % f.__closure__[0].cell_contents)
  
  # We can also show this by evaluating f
  print("f evaluates to %d" % f())

describe(f)
```

Lambda functions and closure
----------------------------

We can combine the concepts of lambda expressions and closure to shorten this example:

```python
def g(x):
  return lambda : x

f = g(5)

describe(f)
```

Or if we want to use two lambda functions:

```python
g = lambda x: (lambda : x)
f = g(5)

describe(f)
```

And finally if we want to call the outer lambda function anonymously just to create the closure:

```python
f = (lambda x: (lambda : x))(5)

describe(f)
```

There is nothing particularly special about anonymous functions in relation to the concept of closure [3]. Many languages treat these functions the same regardless of whether they are named, but some languages also treat closure a little differently for anonymous functions.

The C language
==============

Before looking at the additional of lambda functions in C++11, let's take a look at functions as first class citizens in C/C++. Consider the following code:

```python, echo=False, results="hidden"
from subprocess import run, STDOUT, PIPE
import os

def show_cpp(src):
  print(open(src).read().strip())

def show_cpp_results(src):
  with open('tmpsrc.cpp','w') as f:
    f.write(src)
    
  compiler_output = run(['g++','-std=c++11','tmpsrc.cpp','-o', 'tmpexec'], stdout=PIPE, stderr=PIPE)
  if (compiler_output.stdout or compiler_output.stderr):
    print(compiler_output.stderr.decode('utf8'))
    raise Exception
  output = run(['./tmpexec'], stdout=PIPE)

  print(output.stdout.decode('utf8'))

  if output.returncode != 0:
    print("Return code: %d" % (output.returncode))
    if output.returncode == -11:
      print("Segmentation Fault")
  
  os.unlink('tmpsrc.cpp')
  os.unlink('tmpexec')
```

```python, echo=False, results="verbatim"
cpp = r"""
#include <stdio.h>

int square(int a) {
    return a * a;
}
 
int main() {
    int (*square_ptr)(int) = square;
 
    printf("%d\n", (*square_ptr)(10));
}
"""

print(cpp)
```
Output:
```python, echo=False, results="verbatim"
show_cpp_results(cpp)
```

We can see that it is possible in older version of C and C++ it is possible to pass around function references as first class citizens. There is not a way to declare an anonymous function in standard C/C++ prior to C++11, but some compilers do provide this functionality.

Let's explore the details of passing and using function pointers. First, consider this example of calling a function that accesses a global variable normally:

```python, echo=False, results="verbatim"
cpp = r"""
#include <stdio.h>

int x = 10;

int add_x(int a) {
    return a + x;
}
 
int main() {
    printf("%d\n", add_x(10));
}
"""

print(cpp)
```
Output:
```python, echo=False, results="verbatim"
show_cpp_results(cpp)
```

This works as expected. Now let's do the same thing using a function pointer:

```python, echo=False, results="verbatim"
cpp = r"""
#include <stdio.h>

int x = 10;

int add_x(int a) {
    return a + x;
}
 
int main() {
    int (*add_x)(int) = add_x;
 
    printf("%d\n", (*add_x)(10));
}
"""

print(cpp)
```
Output:
```python, echo=False, results="verbatim"
show_cpp_results(cpp)
```

This fails with a segmentation fault. This is due to the fact that function pointers in C/C++ are raw memory locations to the machine code of a function. There is no concept of closure, and functions called this way are only able to access their own local scope.

C++03 added the concept of a functor. This is basically a class that uses it's properties to implement a closure for a function. Consider the following example:

```python, echo=False, results="verbatim"
cpp = r"""
#include "stdio.h"

int main() {
  struct add_x {
    add_x(int x) : x(x) {}
    int operator()(int a) const { return a + x; }
    
    int x;
  };
  
  add_x add10(10);
  printf("add10(5) = %d\n", add10(5));
  printf("add10(25) = %d\n", add10(25));
  add_x add20(10);
  printf("add20(5) = %d\n", add20(5));
  printf("add20(25) = %d\n", add20(25));
}
"""

print(cpp)
```
Output:
```python, echo=False, results="verbatim"
show_cpp_results(cpp)
```

Now lets look at the syntax that was added in C++11 for lambda expressions as anonymous functors:


```python, echo=False, results="verbatim"
cpp = r"""
#include "stdio.h"

int main() {
  auto add_5 = [](int a) { return a + 5; };

  printf("%d\n", add_5(10));
}
"""

print(cpp)
```
Output:
```python, echo=False, results="verbatim"
show_cpp_results(cpp)
```

That's simple enough. Let's explore the syntax to capture a variable to the function's scope:

```python, echo=False, results="verbatim"
cpp = r"""
#include <stdio.h>

int main() {
  int x = 10;

  auto add_x = [x](int a) { return a + x; };

  printf("%d\n", add_x(10));

  x = 20;

  printf("%d\n", add_x(10));  
}
"""

print(cpp)
```
Output:
```python, echo=False, results="verbatim"
show_cpp_results(cpp)
```

We can see clearly that this allows us to bind variables to the function's closure as they were when the lambda expression was declared.

We can also capture parameters by reference:

```python, echo=False, results="verbatim"
cpp = r"""
#include <stdio.h>

int main() {
  int x = 10;

  auto add_x = [&x](int a) { return a + x; };

  printf("%d\n", add_x(10));

  x = 20;

  printf("%d\n", add_x(10));  
}
"""

print(cpp)
```
Output:
```python, echo=False, results="verbatim"
show_cpp_results(cpp)
```

We can also simply capture the entire scope (using `=` to capture by value or `&` to capture by reference) and let the compiler figure out the rest:

```python, echo=False, results="verbatim"
cpp = r"""
#include <stdio.h>

int main() {
  int x = 10;

  auto add_x = [&](int a) { return a + x; };

  printf("%d\n", add_x(10));

  x = 20;

  printf("%d\n", add_x(10));  
}
"""

print(cpp)
```
Output:
```python, echo=False, results="verbatim"
show_cpp_results(cpp)
```

C++11 lambda expression implementation
======================================

C++ lambda expressions are quite literally implemented as anonymous functors. Functors and lambda expressions are both compiled down to unoptimized assembly as[6]:

    push   rbp
    mov    rbp,rsp
    mov    QWORD PTR [rbp-0x8],rdi
    mov    DWORD PTR [rbp-0xc],esi
    // Do something
    pop    rbp
    ret

While regular functions look more like this:

    push   rbp
    mov    rbp,rsp
    mov    DWORD PTR [rbp-0x4],edi
    // Do something
    pop    rbp
    ret

The only real difference between these two is that the functor/lambda case include a reference to the object containing it's scope. This demonstrates that functors and lambda expression in C++ are nearly identical, and lambda expression just provide syntactic sugar to quickly create an anonymous functor.

Desire for lambda expressions
-----------------------------

Why do we even want lambda expressions? I don't spend much time in C++ these days, but the language has a history of bolting on new features without breaking backwards compatibility. The original language grew out of a desire to add object-oriented features to C++, so it makes sense that it would also want to bolt on more functional features.

Unfortunately, unlimited backwards compatibility accross multiple eras of programming paradigms can create a somewhat complex syntax both for human consumption and compilation. Functors helped to create more functional programming opportunities in C++, but the syntax was incredibly clunky and verbose, so lambda expressions were added to simplify functor usage.

> Then I would like for you to present comments that go beyond the text on
the "How" and "Why" of the inclusion of Lambda-Expressions in C++ 11.
(means you need to look elsewhere  )

References
==========

1. https://blog.feabhas.com/2014/03/demystifying-c-lambdas/
2. https://stackoverflow.com/questions/220658/what-is-the-difference-between-a-closure-and-a-lambda
3. https://stackoverflow.com/questions/220658/what-is-the-difference-between-a-closure-and-a-lambda
4. https://en.wikipedia.org/wiki/Lambda_calculus
5. https://en.wikipedia.org/wiki/Anonymous_function
6. https://web.mst.edu/~nmjxv3/articles/lambdas.html

